% simplex primalfunction [vb, xb, z] = simplexP(c, A, b,bland) %bland== 1 si es vol fer bland, bland == 0 si CRMN% Simplex fase Idisplay("Simplex Fase I")%creem les variables artificialsc1 = cat(2, zeros(1, columns(A)), ones(1, rows(A)))'; % concatenació de n zeros i m unsA1 = [A, eye(rows(A), rows(A))]; % concatenació de A + identidad de mxmvb1 = columns(A)+1 : columns(A) + rows(A); % indexos variables artificialsvn1 = 1 : columns(A);iout = 0;xb1 = b;z1 = c1(vb1)'*xb1;niter = 0;while (iout == 0)  niter = niter + 1;  fprintf(["  Iteracio ", num2str(niter)])  if (bland) [vb1, vn1, xb1, z1, rq, iout] = simplexP_iterBland(c1, A1, b, vb1, vn1, xb1, z1, iout); endif  if ( ! bland ) [vb1, vn1, xb1, z1, rq, iout] = simplexP_iterCRMN(c1, A1, b, vb1, vn1, xb1, z1, iout); endifendwhile;disp(["Solucio basica factible de fase I trobada, iteracio ", num2str(niter)])if(z1 != 0) display("El problema original es infactible."); return; end% Simplex fase IIdisplay("Simplex Fase II")vb = vb1;vn = [1:columns(A)];vn(vb) = [];xb = A(:, vb)^(-1)*b;z = c(vb)'*xb;iout = 0;niter = 0;while (iout == 0)  niter = niter + 1;  fprintf(["  Iteracio ", num2str(niter)])  if (bland) [vb, vn, xb, z, rq, iout] = simplexP_iterBland(c, A, b, vb, vn, xb, z, iout); endif;  if ( ! bland) [vb, vn, xb, z, rq, iout] = simplexP_iterCRMN(c, A, b, vb, vn, xb, z, iout); endif;endwhile;if (iout == 3) disp("El problema es il.limitat."); return; endif (iout == 2)  disp(["Solucio basica factible trobada, iteracio ", num2str(niter)]);  output_precision(3);  vb  xb = xb'; %aixo serveix per fer el display en fila i que ocupi menys  xb  xb = xb';  z  rqendif;endfunction;